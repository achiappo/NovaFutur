First Step: read in the input information. 
The standard input function in Python does not enforce a specific formatting of the input or its value.
Given the nature of the problem, all input numbers should be integers.
To account for possible mistakes in the input, eg. numbers N or M exceeding 1000, I include clauses and printed instructions to guide the user.

The instructions to read in each pizzeria's coordinates and distance to blocks served should be flexible, as the number of rows following the first depend on the second number entered in the first row.
Moreover, an instruction should be included to verify that the pizzerias' coordinates are within the grid size, ie. each should be in the range [1, N]]

Second Step: creating pizzerias serving map
To create a map of which city blocks are served by the different pizzerias, we can initialise a grid of zeros of size N, each corresponding to a city block.
To calculate the distance between blocks and pizzerias, two substeps are needed:  
- a grid with the coordinates of every block
- a proper reshaping of the former to facilitate the usage of Scipy's distance functions

For every pizzeria, we then identify the blocks it serves by calculating the distance to them.
Given the East/West and North/South contraint on the motion of the delivery, a simple way of identifying the blocks' distance to a certain pizzeria is using Manhattan distance.
The resulting map of distances can be then used to identify those blocks within a distance K of pizzeria P.
For each block reached by the pizzeria delivery, we increase the corresponding grid value by 1.

Two things to keep in mind:
1. grid rows correspond to Y coordinate and columns to X components, respectively.
2. pizzerias' coordinates should be decreased by 1, to convert them to (Python) indices

Final Step: get greatest pizza selection
Simply get maximum value of the grid containing the counts of pizzerias delivery.